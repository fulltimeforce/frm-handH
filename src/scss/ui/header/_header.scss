@use "base/mixins" as m;
@use "base/variables" as v;

%a {
    text-transform: uppercase;
    leading-trim: both;
    text-edge: cap;
    color: white;
}

%flex_button_link {
    position: relative;
    background: transparent;
    @include m.transition;

    @media (min-width: v.$tv) {
        @include m.flex(flex-start, m.px-to-vw(16px));
        padding-inline: m.px-to-vw(16px);
        border: m.px-to-vw(1px) solid rgba($color: v.$light_brown, $alpha: 0)
    }

    @include m.tv {
        border: 1px solid rgba($color: v.$light_brown, $alpha: 0)
    }

    p {
        @include m.p;
    }

    svg {
        @media (min-width: v.$tv) {
            @include m.square(m.px-to-vw(36px));
        }

        @include m.tv {}
    }

    .arrow {
        position: absolute;
        @include m.centerY(true);
        z-index: 3;
        @include m.transition;

        @media (min-width: v.$tv) {
            right: m.px-to-vw(16px);
        }

        @include m.tv {}
    }

    &:is(:hover, :focus){
        background: v.$gray_light;
        border-color: v.$light_brown;
    }
}

.header {
    position: fixed;
    z-index: 100;
    top: 0;
    left: 0;
    background: rgba($color: white, $alpha: 0.2);
    backdrop-filter: blur(20px);

    @media (min-width: v.$tv) {
        padding-block: m.px-to-vw(30px);
        padding-inline: m.px-to-vw(180px);
    }

    @media (max-width: v.$tv) {}

    &.white_bg {
        background: white;
    }

    &_lines {
        position: fixed;
        bottom: 0;
        z-index: 3;
        @media (min-width: v.$tv){
            height: calc(100vh - m.px-to-vw(150px)) !important;
            width: m.px-to-vw(40px) !important;
            left: m.px-to-vw(216px) !important;
        }
        @include m.tv{
            
        }
        user-select: none;
        -webkit-user-drag: none;

        object-fit: cover;
        object-position: center;
    }

    &_container {
        // @include m.flex(space-between);

        @media (min-width: v.$tv) {
            display: grid;
            grid-template-columns: m.px-to-vw(112px) 1fr;
            grid-gap: m.px-to-vw(64px);
        }

        @include m.tv {}

        a,
        button {
            font-family: 'GothamLight';
        }
    }

    &_logo {
        @media (min-width: v.$tv) {
            max-width: m.px-to-vw(112px);
        }

        @media (max-width: v.$tv) {}
    }

    ul,
    li {
        list-style: none;
    }

    nav {
        position: relative;
        width: 100%;
        @include m.flex(space-between);
    }

    &_navigation {
        mix-blend-mode: difference;

        &--bg {
            @media (min-width: v.$tv) {
                display: none;
            }
        }

        &--list {
            @media (min-width: v.$tv) {
                padding-top: m.px-to-vw(34px);
            }

            @include m.tv {}
        }
    }

    .submenu {
        position: absolute;
        background: v.$white;
        @include m.transition;
        box-shadow: 0px 4px 24px 0px rgba(0, 0, 0, 0.25);
        top: calc(100% + m.px-to-vw(30px) + m.px-to-vw(10px));
        opacity: 0;
        pointer-events: none;

        @media (min-width: v.$tv) {
            left: m.px-to-vw(-32px);
            width: m.px-to-vw(1416px);
            padding: m.px-to-vw(32px);
        }

        @include m.tv {}

        &_content {
            @include m.flex(flex-start, m.px-to-vw(6px));
        }

        &-link {
            flex: 1;

            &:not(.small){
                @media (min-width: v.$tv){
                    max-width: calc((100% / 3) - m.px-to-vw(6px));
                }
                min-width: calc((100% / 3.3));
            }
            &.small{
                @media (min-width: v.$tv){
                    max-width: calc((100% / 5) - m.px-to-vw(6px));
                }
                min-width: calc((100% / 5.2));
            }

            @media (min-width: v.$tv) {
                padding-block: m.px-to-vw(20px);
            }

            @include m.tv {}

            @extend %flex_button_link;
        }

        &_dropdown {
            width: 100%;

            &-section {
                width: 100%;

                @media (min-width: v.$tv) {
                    padding-block: m.px-to-vw(12px);
                    @include m.flex(space-between, m.px-to-vw(12px));
                }

                @include m.tv {}
            }

            &-item {
                flex: 1;

                button {
                    width: 100%;
                    @extend %flex_button_link;
                    background: transparent;

                    @media (min-width: v.$tv) {
                        border: m.px-to-vw(1px) solid v.$light_brown;
                        padding-block: m.px-to-vw(8px);
                    }

                    @include m.tv {
                        border: 1px solid v.$light_brown;
                    }
                }
            }

            &-content{
                .submenu-link{
                    &:is(:hover, :focus){
                        background: transparent;
                        border-color: rgba($color: v.$light_brown, $alpha: 0);
                    }
                }
            }

            &[data-state="0"]{
                .submenu_dropdown{
                    &-content{
                        display: none;
                    }
                }
            }
            &[data-state="1"]{
                .submenu_dropdown{
                    &-item:nth-child(1){
                        button{
                            background: v.$gray_light;
                            .arrow{
                                transform: translateY(-50%);
                            }
                        }
                    }
                    &-content{
                        .submenu_content:not(:nth-child(1)){
                            display: none;
                        }
                    }
                }
            }
            &[data-state="2"]{
                .submenu_dropdown{
                    &-item:nth-child(2){
                        button{
                            background: v.$gray_light;
                            .arrow{
                                transform: translateY(-50%);
                            }
                        }
                    }
                    &-content{
                        .submenu_content:not(:nth-child(2)){
                            display: none;
                        }
                    }
                }
            }
        }
    }

    .ul_menu {
        @media (min-width: v.$tv) {
            @include m.flex(center, m.px-to-vw(8px));
        }

        @media (max-width: v.$tv) {
            @include m.flex(center, 4px);
        }

        &>li {

            &>button,
            &>a {
                @extend %a;

                font-family: v.$gotham_light;
                font-weight: 300;
                line-height: normal;
                background: none;
                border: none;

                @media (min-width: v.$tv) {
                    letter-spacing: m.px-to-vw(0.48px);
                    @include m.flex(center, m.px-to-vw(9px));
                    font-size: m.px-to-vw(16px);
                    padding: m.px-to-vw(18.5px) m.px-to-vw(16px);
                }

                @media (max-width: v.$tv) {
                    @include m.flex(center, 5px);
                    font-size: 15px;
                    padding: 14px 11px;
                }

                @include m.transition;

                svg,
                path {
                    @include m.transition;
                }

                svg {
                    @media (min-width: v.$tv) {
                        width: m.px-to-vw(8px);
                    }

                    @include m.tv {
                        width: 6px;
                    }

                    height: auto;
                    object-fit: contain;
                }
            }

            &.active {
                .submenu {
                    opacity: 1;
                    pointer-events: all;
                }
            }

            &:first-child {
                &>a {
                    padding-left: 0;
                }
            }

            &:last-child {
                &>a {
                    padding-right: 0;
                }
            }
        }
    }

    &_actions {
        mix-blend-mode: difference;

        @media (min-width: v.$tv) {
            padding-top: m.px-to-vw(34px);
            @include m.flex(flex-end, m.px-to-vw(18px));
        }

        @media (max-width: v.$tv) {
            @include m.flex(flex-end, 12px);
        }

        button {
            background: none;
            border: none;
            @extend %a;

            @media (min-width: v.$tv) {
                padding-block: m.px-to-vw(18.5px);
                padding-inline: 0 m.px-to-vw(16px);
                @include m.flex(center, m.px-to-vw(9px));
                font-size: m.px-to-vw(16px);
                letter-spacing: m.px-to-vw(0.48px);
            }

            @media (max-width: v.$tv) {
                padding-block: 14px;
                padding-inline: 0 11px;
                @include m.flex(center, 5px);
                font-size: 15px;
            }

            svg {
                @media (min-width: v.$tv) {
                    @include m.square(m.px-to-vw(12px));
                }

                @media (max-width: v.$tv) {
                    @include m.square(10px);
                }
            }
        }

        a {
            @include m.btn1;
        }

        svg,
        path {
            @include m.transition;
        }
    }

    &.dark {
        .ul_menu {
            &>li {
                &>button, &>a {
                    color: v.$black;

                    svg,
                    path {
                        fill: v.$black;
                    }
                }
            }
        }

        .header {
            &_actions {

                a,
                button {
                    color: v.$black;

                    svg,
                    path {
                        stroke: v.$black;
                    }
                }

                button, a {
                    border-color: v.$black;
                }
            }
        }
    }

}